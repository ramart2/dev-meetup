import * as firebase from 'firebase'

/*
  This is just a regular javascript object and no longer is a store.
  It no longer is a store, instead it gets sent to the store file now.
*/
export default {
  // the store configuration
  state: {
    user: null  // default user until one logs in
  },
  mutations: {  // changes the state of data properties
    registerUserForMeetup (state, payload) {
      // extract the meetup id that was registered for
      const id = payload.id

      // using findIndex to determine if a value >= 0 is returned
      // if it is we know the user is already registered for that meetup
      if (state.user.registeredMeetups.findIndex(meetup => meetup.id === id) >= 0) {
        return
      }

      // otherwise the user is not registered for the meetup yet
      state.user.registeredMeetups.push(id)

      // add firebase keys
      state.user.fbKeys[id] = payload.fbKey
    },
    unregisterUserFromMeetup (state, payload) {
      // get the registered meetup of the user
      const registeredMeetups = state.user.registeredMeetups

      // remove the registered meetup with splice that removes that element
      registeredMeetups.splice(registeredMeetups.findIndex(meetup => meetup.id === payload), 1)

      // remove the key:value pair with javaScripts Reflect API
      Reflect.deleteProperty(state.user.fbKeys, payload)
    },
    setUser (state, payload) {
      state.user = payload  // the currently signed in user
    }
  },
  /*
    Perform all asynchronous tasks in the actions area
   */
  actions: {  // to dispatch the mutations
    registerUserForMeetup ({commit, getters}, payload) {
      commit('setLoading', true)

      // get the current user
      const user = getters.user

      /*
        This will create 3 nodes in the database.
          +users
            +user.id
              +registration
        The registrations will be pushed under the registration node.
       */
      firebase.database().ref('/users/' + user.id).child('/registrations/')
        .push(payload)  // payload is te user id
        .then(data => {
          commit('setLoading', false)
          commit('registerUserForMeetup', {id: payload, fbKey: data.key})  // fbKey is the firebase key, created by firebase
        })
        .catch(error => {
          console.log(error)
          commit('setLoading', false)
        })
    },
    unregisterUserFromMeetup ({commit, getters}, payload) {
      commit('setLoading', true)
      const user = getters.user

      // if the user doesn't have fbKeys it doesn't exist
      if (!user.fbKeys) {
        return
      }

      // extract the firebase key assigned by firebase to the registration
      const fbKey = user.fbKeys[payload]
      firebase.database().ref('/users/' + user.id + '/registrations/').child(fbKey)
        .remove()
        .then(() => {
          commit('setLoading', false)
          commit('unregisterUserFromMeetup', payload)  // the payload is just the id of the meetup to remove
        })
        .catch(error => {
          console.log(error)
          commit('setLoading', false)
        })
    },
    signUserUp ({commit}, payload) {  // manage the user signup in our store
      commit('setLoading', true)  // set loading to true
      commit('clearError')  // clear any existing error in the payload
      firebase.auth().createUserWithEmailAndPassword(payload.email, payload.password)
        .then(
          user => {
            commit('setLoading', false)  // stop loading
            const newUser = {
              id: user.uid,
              registeredMeetups: [],
              fbKeys: {}  // the firebase keys of the meetups they're registered for
            }
            commit('setUser', newUser)
          }
        )
        .catch(
          error => {
            commit('setLoading', false)  // stop loading
            commit('setError', error)  // use the generated error message
            console.log(error)
          }
        )
    },
    signUserIn ({commit}, payload) {  // payload is an object with an email and password
      commit('setLoading', true)  // set loading to true
      commit('clearError')  // clear any existing error in the payload

      // payload is what is currently in the store
      firebase.auth().signInWithEmailAndPassword(payload.email, payload.password)
        .then(
          user => {  // receive the user and store it in the store
            commit('setLoading', false)
            const newUser = {
              id: user.uid,
              registeredMeetups: [],
              fbKeys: {}  // the keys generated by firebase for the meetup they're registered for
            }
            commit('setUser', newUser)  // mutation and pass the new user
          }
        )
        .catch(
          error => {
            commit('setLoading', false)
            commit('setError', error)
            console.log(error)
          }
        )
    },
    autoSignIn ({commit}, payload) {
      commit('setUser', {
        id: payload.uid,
        registeredMeetups: [],
        fbKeys: {}  // the firebase generated keys fo the meetups the user is registered for
      })
    },
    fetchUserData ({commit, getters}) {
      commit('setLoading', true)

      // get user data from firebase using the getters
      // once fetches the data once.  It doesn't set up a permanent listener
      firebase.database().ref('/users/' + getters.user.id + '/registrations/').once('value')
        .then(data => {
          // retrieve the values we got from the database
          // the val method converts firebase data to normal javascript to work with
          // values is now an object with data
          // firebase generated keys : meetup id keys
          const dataPairs = data.val()
          let registeredMeetups = []
          let swappedPairs = []
          // loop through keys
          for (let key in dataPairs) {
            registeredMeetups.push(dataPairs[key])
            swappedPairs[dataPairs[key]] = key  // swap the properties and values
          }
          const updatedUser = {
            id: getters.user.id,
            registeredMeetups: registeredMeetups,
            fbKeys: swappedPairs
          }
          commit('setLoading', false)
          commit('setUser', updatedUser)
        })
        .catch(error => {
          console.log(error)
          commit('setLoading', false)
        })
    },
    logout ({commit}) {
      firebase.auth().signOut()
      commit('setUser', null)
    }
  },
  getters: {  // get the store in pur components
    user (state) {  // return the user from vuex store
      return state.user
    }
  }
}
